<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:utils="fr.semantic_learning.semquiz.utils.*"
	label="Units"
	initialize="init()"
	defaultButton="{addNewUnitBtn}">


<mx:Script>
	<![CDATA[
		import fr.semantic_learning.semquiz.valueobjects.StructureYear;
		import fr.semantic_learning.semquiz.valueobjects.StructureSemester;
		import fr.semantic_learning.semquiz.valueobjects.StructureUnits;
		
			import fr.semantic_learning.semquiz.valueobjects.StructureParcours;
			import fr.semantic_learning.semquiz.valueobjects.StructureUser;
			import fr.semantic_learning.semquiz.valueobjects.StructureMention;
			import fr.semantic_learning.semquiz.valueobjects.StructureSpecialization;
			import fr.semantic_learning.semquiz.valueobjects.StructureDisciplineSection;
			import fr.semantic_learning.semquiz.valueobjects.StructureCompetence;
			import fr.semantic_learning.semquiz.valueobjects.StructureFormation;
			
			
			import fr.semantic_learning.semquiz.commands.AllCommands;
			import fr.semantic_learning.semquiz.CentralComm;
			import fr.semantic_learning.events.EventCommandFlex;
			import mx.controls.Alert;
			import fr.semantic_learning.semquiz.commands.AllCommands;
			import mx.managers.CursorManager;
			import mx.core.Application;
			
			public var newUnit:StructureUnits = new StructureUnits("null","null","null","null","null","null",new Array, new Array, new Array, new Array);
		
		public function init():void
		{
			CentralComm.app = Application.application as main;
			
			this.addEventListener(AllCommands.SELECT_USER, manageEventResp);
			this.addEventListener(AllCommands.SELECT_SECTION, manageEventSection);
			this.addEventListener(AllCommands.SELECT_MENTION, manageEventMention);
			this.addEventListener(AllCommands.SELECT_FORMATION, manageEventFormation);			
			this.addEventListener(AllCommands.SELECT_SPECIALIZATION, manageEventSpecialization);
			this.addEventListener(AllCommands.SELECT_PARCOURS, manageEventParcours);
			this.addEventListener(AllCommands.SELECT_COMPETENCE, manageEventCompetence);
			this.addEventListener(AllCommands.SELECT_SEMESTER, manageEventSemester);
			this.addEventListener(AllCommands.SELECT_YEAR, manageEventYear);
			
			
	
		}
		
		public function checkIfCompletedAll():Boolean
		{
			
			if(codeTextInput.text == "Code" || codeTextInput.text == "")
			{
				Alert.show("Complete Code");
				codeTextInput.text = "";
				codeTextInput.setFocus();
				return false;
			} else if(titleTextInput.text == "Title" || titleTextInput.text == "")
			{
				Alert.show("Complete Title");
				titleTextInput.text = "";
				titleTextInput.setFocus();
				return false;
			} else if(unitTypeCbx.selectedLabel == "Unit Type")
			{
				Alert.show("Select Unit Type");
				unitTypeCbx.setFocus();
				return false;
				
			} else if(learningTypeCbx.selectedLabel == "Learning Type")
			{
				Alert.show("Select Learning Type");
				
				return false;
			} else if(responsableList.selectedItems.length == 0)
			{
				Alert.show("Select Responsable");
				selectStack1.selectedChild = selectResponsable;
				getResp();
				return false;
			} else if(sectionList.selectedItems.length == 0)
			{
				Alert.show("Select Section");
				selectStack1.selectedChild = selectSection;
				getSection();
				return false;
			} else if(!checkIfCompletedStack()){
				return false;
			} else if(prerequistsList.selectedItems.length == 0)
			{
				Alert.show("Select Prerequists");
				getCompetence();
				return false;
			} else if(competenceSelectedList.selectedItems.length == 0)
			{
				Alert.show("Select Competence");
				return false;
			} else {
				
			
			//infoText.text = newSpecialization.cod+";\n"+newSpecialization.title; 
			
			}
			return true;
		}
		public function checkIfCompletedStack():Boolean
		{
			
			if(formationList.selectedItems.length == 0)
			{
				Alert.show("Select Formations");
				selectStack.selectedChild = selectFormation;
				getFormation();
				return false;
			} else if(yearList.selectedItems.length == 0)
			{
				Alert.show("Select Years");
				selectStack.selectedChild = selectYear;
				getYearSemester();
				return false;
			} else if(semesterList.selectedItems.length == 0)
			{
				Alert.show("Select Semester");
				selectStack.selectedChild = selectYear;
				return false;
			} else if(mentionList.selectedItems.length == 0)
			{
				Alert.show("Select Mention");
				selectStack.selectedChild = selectMention;
				getMention();
				return false;
			} else if(specializationList.selectedItems.length == 0 && formationList.selectedItem.title == "Master")
			{
				Alert.show("Select Specialization");
				selectStack.selectedChild = selectSpecialization;
				getSpecialization();
				return false;
			} else {
				return true;
			}
			
		}
		
		//add new unit function
		public function addNewUnit():void
		{
			if(checkIfCompletedAll())
			{
				
			
			newUnit.codUnit = codeTextInput.text;
			newUnit.title = titleTextInput.text;
			newUnit.unitType = unitTypeCbx.selectedLabel;
			newUnit.learningType = learningTypeCbx.selectedLabel;
			newUnit.credits = creditsInputNs.value.toString();
			newUnit.idSemester = semesterList.selectedItem.id;
			newUnit.objectivs = objectiveTextInput.text;
			
			newUnit.idUser = responsableList.selectedItem.id;
			newUnit.idSection = sectionList.selectedItem.id;
			newUnit.idYear = yearList.selectedItem.id;
			
			newUnit.idMention = mentionList.selectedItem.id;
			
   			for each (var itemSpecialization:StructureSpecialization in specializationList.selectedItems)
       			{
    				newUnit.idSpecialization.push(itemSpecialization.id); 
      			}
			
   			for each (var itemParcours:StructureParcours in parcoursList.selectedItems)
       			{
    				newUnit.idParcours.push(itemParcours.id); 
      			}

   			for each (var itemPrerequists:StructureCompetence in prerequistsList.dataProvider)
       			{
    				newUnit.idPrerequists.push(itemPrerequists.id); 
      			}

   			for each (var itemCompetence:StructureCompetence in competenceList.dataProvider)
       			{
    				newUnit.idCompetence.push(itemCompetence.id); 
      			}




			
			var event:EventCommandFlex = new EventCommandFlex(AllCommands.NEW_UNIT ,newUnit);
			CentralComm.app.dispatchEvent(event);
			}
			
		}
		public function getID(item:Object):String
		{
			return item.id;
		}
		
		public function getResp():void
		{
			if(responsableTextInput.text == "Search Responsable")
			{
				responsableTextInput.text = "";
				responsableTextInput.setFocus();
			}
			var getResp:StructureUser = new StructureUser();
			
			getResp.role = "Professor";
			getResp.familyName = responsableTextInput.text;
			getResp.givenName = responsableTextInput.text;
			
			var getRespEvent:EventCommandFlex = new EventCommandFlex(AllCommands.SELECT_USER, getResp);
			CentralComm.app.dispatchEvent(getRespEvent);
		}
		
		public function manageEventResp(event:EventCommandFlex):void
		{
			//Alert.show("a venit user in manage mention!");
			var arrResp:Array = new Array();
			arrResp = event.args as Array;
			//infoText.text += arrMentions.toString();
			CursorManager.removeBusyCursor();
			//Alert.show(arrResp.length.toString());
			responsableList.dataProvider = arrResp;
			
		}
		
		public function getYearSemester():void
		{
			selectStack.selectedChild = selectYear;
			getYear();
			getSemester();
			
		}
		
		public function getSemester():void
		{
			var getSemester:StructureSemester = new StructureSemester();
			var getSemesterEvent:EventCommandFlex = new EventCommandFlex(AllCommands.SELECT_SEMESTER, "");
			CentralComm.app.dispatchEvent(getSemesterEvent);
			CursorManager.setBusyCursor();			
		}
		
		public var arrSemesters:Array = new Array();

		public function manageEventSemester(event:EventCommandFlex):void
		{
			
			arrSemesters = event.args as Array;
			CursorManager.removeBusyCursor();
			
		}
		
		public function getYear():void
		{
			var getYear:StructureYear= new StructureYear();
			//Alert.show(formationList.selectedItem.id);
			
			if(formationList.selectedItems.length != 0) {
			
				getYear.idFormation = formationList.selectedItem.id;
			}
			
			var getYearEvent:EventCommandFlex = new EventCommandFlex(AllCommands.SELECT_YEAR, getYear);
			CentralComm.app.dispatchEvent(getYearEvent);
			CursorManager.setBusyCursor();			
		}
		
		
		public function manageEventYear(event:EventCommandFlex):void
		{
			var arrYear:Array = new Array();
			arrYear = event.args as Array;
			
			yearList.dataProvider = arrYear;
			
			//infoText.text += arrSectionsTitle.toString();
			CursorManager.removeBusyCursor();
			
			
		}
		
		
		public function getSection():void
		{
			var getSection:StructureDisciplineSection = new StructureDisciplineSection(null, sectionTextInput.text)
			var getSectionsEvent:EventCommandFlex = new EventCommandFlex(AllCommands.SELECT_SECTION, getSection);
			CentralComm.app.dispatchEvent(getSectionsEvent);
			CursorManager.setBusyCursor();			
		}
		
		
		public function manageEventSection(event:EventCommandFlex):void
		{
			var arrSections:Array = new Array();
			arrSections = event.args as Array;
			
			sectionList.dataProvider = arrSections;
			
			//infoText.text += arrSectionsTitle.toString();
			CursorManager.removeBusyCursor();
			
			
		}
		
		public function getFormation():void
		{
			
			var getFormation:StructureFormation = new StructureFormation("");
			var getFormationEvent:EventCommandFlex = new EventCommandFlex(AllCommands.SELECT_FORMATION, getFormation);
			CentralComm.app.dispatchEvent(getFormationEvent);
			
			
		}
		
		public function manageEventFormation(event:EventCommandFlex):void
		{
			var arrFormation:Array = new Array();
			arrFormation = event.args as Array;
			CursorManager.removeBusyCursor();
			//Alert.show(event.args.length.toString());
			formationList.dataProvider = arrFormation;
		}
		
		public function getMention():void
		{
		
				
			
			if(mentionTextInput.text == "Search Mention")
			{
				mentionTextInput.text = "";
				mentionTextInput.setFocus();
			}

			//var getFormation:StructureFormation = new StructureFormation();
			
			var getMention:StructureMention = new StructureMention(mentionTextInput.text);
			
			if(formationList.selectedItems.length != 0) {
			
				getMention.idFormation = formationList.selectedItem.id;
			}
			
			
			var getMentionEvent:EventCommandFlex = new EventCommandFlex(AllCommands.SELECT_MENTION, getMention );
			
			CentralComm.app.dispatchEvent(getMentionEvent);
		
			
		}
		public function manageEventMention(event:EventCommandFlex):void
		{
			//Alert.show("a venit user in manage mention!");
			var arrMention:Array = new Array();
			arrMention = event.args as Array;
			//infoText.text += arrMentions.toString();
			CursorManager.removeBusyCursor();
			
			//Alert.show(arrResp.length.toString());
			mentionList.dataProvider = arrMention;
			
		}
		
		
		public function getSpecialization():void
		{
			if(specializationTextInput.text == "Search Specialization")
			{
				specializationTextInput.text = "";
				specializationTextInput.setFocus();
			}
			//var getFormation:StructureFormation = new StructureFormation();
			
			var getSpecialization:StructureSpecialization = new StructureSpecialization(null, specializationTextInput.text);
			
			if(mentionList.selectedItems.length !=0)
			{
				getSpecialization.idMention = mentionList.selectedItem.id;	
			}
			
			var getSpecializationEvent:EventCommandFlex = new EventCommandFlex(AllCommands.SELECT_SPECIALIZATION, getSpecialization );
			
			CentralComm.app.dispatchEvent(getSpecializationEvent);
			
		}
		
		public function manageEventSpecialization(event:EventCommandFlex):void
		{
			//Alert.show("a venit user in manage mention!");
			var arrSpecialization:Array = new Array();
			arrSpecialization = event.args as Array;
			//infoText.text += arrMentions.toString();
			CursorManager.removeBusyCursor();
			
			//Alert.show(arrResp.length.toString());
			specializationList.dataProvider = arrSpecialization;
			
		}
		
		
		public function getParcours():void
		{
			if(parcoursTextInput.text == "Search Parcours")
			{
				parcoursTextInput.text = "";
				parcoursTextInput.setFocus();
			}
			//var getFormation:StructureFormation = new StructureFormation();
			
			var getParcours:StructureParcours = new StructureParcours(null, parcoursTextInput.text);
			
			if (specializationList.selectedItems.length != 0)
			{
				getParcours.idSpecialization = specializationList.selectedItem.id;
			} else if(mentionList.selectedItems.length !=0)
			{
				getParcours.idMention = mentionList.selectedItem.id;	
			}
			
			var getParcoursEvent:EventCommandFlex = new EventCommandFlex(AllCommands.SELECT_PARCOURS, getParcours );
			
			CentralComm.app.dispatchEvent(getParcoursEvent);
			
			
		}
		
		public function manageEventParcours(event:EventCommandFlex):void
		{
			//Alert.show("a venit user in manage mention!");
			var arrParcours:Array = new Array();
			arrParcours = event.args as Array;
			//infoText.text += arrMentions.toString();
			CursorManager.removeBusyCursor();
			
			//Alert.show(arrResp.length.toString());
			parcoursList.dataProvider = arrParcours;
			
		}
		
		public function getCompetence():void
		{
			if(competenceTextInput.text == "Search Competence")
			{
				competenceTextInput.text = "";
				competenceTextInput.setFocus();
			}
			//var getFormation:StructureFormation = new StructureFormation();
			
			var getCompetence:StructureCompetence = new StructureCompetence(competenceTextInput.text);
			
			var getCompetenceEvent:EventCommandFlex = new EventCommandFlex(AllCommands.SELECT_COMPETENCE, getCompetence);
			
			CentralComm.app.dispatchEvent(getCompetenceEvent);
			
		}
		
		public function manageEventCompetence(event:EventCommandFlex):void
		{
			//Alert.show("a venit user in manage mention!");
			var arrCompetence:Array = new Array();
			arrCompetence = event.args as Array;
			//infoText.text += arrMentions.toString();
			CursorManager.removeBusyCursor();
			
			//Alert.show(arrResp.length.toString());
			competenceList.dataProvider = arrCompetence;
			
		}
		
		
		public function getLabelResp(user:StructureUser):String
		{
			return user.familyName;
		}
		
		public function getLabelSection(section:StructureDisciplineSection):String
		{
			return section.cod+" - "+section.title;
			
		}
		public function getLabelFormation(formation:StructureFormation):String
		{
			return formation.title;
		}
		
		public function getLabelMention(mention:StructureMention):String
		{
			return mention.title;
		}
		public function getLabelSemester(semester:StructureSemester):String
		{
			return semester.title;
		}
		public function getLabelYear(year:StructureYear):String
		{
			return year.title;
		}
		public function getLabelSpecialization(specialization:StructureSpecialization):String
		{
			return specialization.title;
		}
		
		public function getLabelParcours(parcours:StructureParcours):String
		{
			return parcours.title;
		}
		
		public function getLabelCompetence(competence:StructureCompetence):String
		{
			return competence.title;
		}
		
		public function getLabelPrerequists(prerequists:StructureCompetence):String
		{
			return prerequists.title;
		}
		
		public function setYear():void
		{
			if(yearList.selectedItems.length != 0){
			
			var arrSemList:Array = new Array();
			for each (var item:StructureSemester in arrSemesters)
			{
				if(yearList.selectedItem.idSemesters[0] == item.id || yearList.selectedItem.idSemesters[1] == item.id)
				{
					arrSemList.push(item);
					
				}
			}
			semesterList.dataProvider = arrSemList;
			} 
		}

		public function setResponsable():void
		{
			setResponsableText.text = responsableList.selectedItem.familyName;
		}
		
		public function setSection():void
		{
			setSectionText.text = sectionList.selectedItem.cod+" - "+sectionList.selectedItem.title;
		}
		
		public function setFormation():void
		{
			
			setFormationText.text = formationList.selectedItem.title;
			//selectStack.selectedChild = selectYear;
			//getYearSemester();
			
		}
		
		public function setMention():void
		{
			setMentionText.text = mentionList.selectedItem.title;
		}
		
		public function setSpecialization():void
		{
			if(specializationList.selectedItems.length != 0){
			setSpecializationText.text = specializationList.selectedItem.title;
			}
		}
		
		public function setParcours():void
		{
			if(parcoursList.selectedItems.length != 0){
			setParcoursText.text = parcoursList.selectedItem.title;
			}
		}
		
		public function setCompetence():void
		{
			
			
		}
		
		public function setPrerequists():void
		{
			
		}
		
		public function previous():void
		{
			if(selectStack.selectedIndex > 0)
			{
				selectStack.selectedIndex = selectStack.selectedIndex - 1;
			}	
		}
		
		public function next():void
		{
			if(selectStack.selectedIndex < selectStack.getChildren().length-1 && checkIfCompletedStack())
			{
				selectStack.selectedIndex = selectStack.selectedIndex + 1;
		
			}
		}	

		
		
	]]>
</mx:Script>



	<mx:TextInput x="27" y="9" text="Code" id="codeTextInput"/>
	<mx:ComboBox x="27" y="52" id="unitTypeCbx">
		<mx:String>Unit Type</mx:String>
		<mx:String>Facultative</mx:String>
		<mx:String>Obligatoire</mx:String>
		<mx:String>Optional</mx:String>
	</mx:ComboBox>
	<mx:TabBar id="selectTabBar" dataProvider="selectStack" enabled="true" x="453" y="3"/>
	<mx:ViewStack id="selectStack" x="455" y="49" resizeToContent="true">
		<mx:Canvas label="Formations" id="selectFormation">
			<mx:Text text="Formation Type:" y="17" x="10"/>
			<mx:Text x="115" y="10" width="230" height="34" text="Click Get Formations" id="setFormationText"/>
			<mx:Button x="10" y="60" label="Get Formations" click="getFormation()"/>
			<mx:List id="formationList" labelFunction="getLabelFormation" change="setFormation()" doubleClickEnabled="true" doubleClick="getYearSemester()" x="132" y="52" height="123" width="213"></mx:List>
			
		</mx:Canvas>

		<mx:Canvas id="selectYear" label="Year">
			<utils:DragSelectList x="292" y="46" width="124" height="68"
				id="semesterList"
				labelFunction="getLabelSemester"
				itemRenderer="fr.semantic_learning.semquiz.utils.CheckBoxControlList"/>
			<mx:Text x="133" y="28" text="Year:"/>
			<mx:List x="176" y="18" width="108" height="96" id="yearList" labelFunction="getLabelYear" click="setYear()"></mx:List>
			<mx:Button x="10" y="71" label="Get Year and Semester" click="getYearSemester()"/>
			<mx:Text x="292" y="28" text="Select Semester:"/>
		</mx:Canvas>
		
		<mx:Canvas label="Mentions" id="selectMention">
		
			<mx:Text x="10" y="10" text="Mention:"/>
			<mx:Text x="72" y="10" text="Select a mention" width="277" id="setMentionText" height="37"/>
			<mx:TextInput x="0" y="56" width="120" text="Search Mention" id="mentionTextInput"/>
			<mx:List x="128" y="55" width="241" height="114" id="mentionList" labelFunction="getLabelMention" change="setMention()"></mx:List>
			<mx:Button x="20" y="95" label="Get Mentions" id="mentionBtn" click="getMention()"/>
		</mx:Canvas>
		<mx:Canvas label="Specialization" id="selectSpecialization">
			<mx:Text x="0" y="10" text="Specialization:"/>
			<mx:Text x="94" y="10" text="Select a specialization" width="275" id="setSpecializationText" height="37"/>
			<mx:TextInput x="0" y="56" width="127" text="Search Specialization" id="specializationTextInput"/>
			<utils:DragSelectList x="135" y="55" width="234" height="114"
				id="specializationList"
				labelFunction="getLabelSpecialization"
				allowMultipleSelection="true"
				itemRenderer="fr.semantic_learning.semquiz.utils.CheckBoxControlList"
				change="setSpecialization()"/>
			<mx:Button x="0" y="95" label="Get Specialization" id="specializationBtn" click="getSpecialization()"/>
		</mx:Canvas>
		<mx:Canvas label="Parcours" id="selectParcours">
			<mx:Text x="10" y="10" text="Parcours:"/>
			<mx:Text x="75" y="10" text="Select Parcours" width="294" id="setParcoursText" height="37"/>
			<mx:TextInput x="10" y="56" width="120" text="Search Parcours" id="parcoursTextInput"/>
			<utils:DragSelectList x="134" y="55" width="235" height="114"
				id="parcoursList"
				labelFunction="getLabelParcours"
				allowMultipleSelection="true"
				itemRenderer="fr.semantic_learning.semquiz.utils.CheckBoxControlList"
				change="setParcours()"/>
			<mx:Button x="26" y="86" label="Get Parcours" id="parcoursBtn" click="getParcours()"/>
		</mx:Canvas>
		
	</mx:ViewStack>
	<mx:TabBar id="selectTabBar1" dataProvider="selectStack1" enabled="true" x="27" y="91"/>
	<mx:ViewStack x="27" y="112" id="selectStack1" resizeToContent="true" width="399">
		<mx:Canvas label="Responsable" id="selectResponsable">
			<mx:TextInput x="0" y="59" width="138" text="Search Responsable" id="responsableTextInput"/>
			<mx:List x="146" y="58" width="253" height="141" id="responsableList" labelFunction="getLabelResp" click="setResponsable()"></mx:List>
			<mx:Button x="17" y="89" label="Get Responsable" id="responsableBtn" click="getResp()"/>
			<mx:Text x="56" y="21" text="Responsable:"/>
			<mx:Text x="146" y="10" text="Select a responsable" width="253" id="setResponsableText" height="40"/>
					
		</mx:Canvas>
		<mx:Canvas label="Sections" id="selectSection">
			<mx:Text x="15" y="39" text="Selected Section:"/>
			<mx:Text x="124" y="10" width="275" id="setSectionText" height="47" text="Select a Section"/>
			<mx:TextInput x="0" y="65" id="sectionTextInput" width="116"/>
			<mx:List x="124" y="65" id="sectionList" labelFunction="getLabelSection" change="setSection()" variableRowHeight="true" wordWrap="true" width="275" height="135"/>
			<mx:Button x="19" y="105" label="Get Sections" click="getSection();"/>
			
			
		</mx:Canvas>
	</mx:ViewStack>
			
	
	<mx:Text x="325" y="54" text="Credits"/>
	<mx:NumericStepper x="375" y="52" minimum="1" value="5" maximum="10" id="creditsInputNs"/>
	<mx:ComboBox x="143" y="52" id="learningTypeCbx">
		<mx:String>Learning Type</mx:String>
		<mx:String>Attendance</mx:String>
		<mx:String>Online</mx:String>
		<mx:String>Attendance and Online</mx:String>
	</mx:ComboBox>
	<mx:Text x="27" y="339" text="Objectivs:"/>
	<mx:TextArea x="27" y="365" width="399" height="78" id="objectiveTextInput" editable="true" wordWrap="true"/>
	<mx:TextInput x="207" y="9" text="Title" id="titleTextInput" width="219"/>
	
	<mx:Text x="454" y="252" text="Prerequists:"/>
	<utils:DragSelectList x="454" y="274"
		width="180" height="86"
		id="prerequistsList"
		labelFunction="getLabelCompetence"
		buttonMode="true"
		dropEnabled="true" 
		dragEnabled="true" 
		dragMoveEnabled="true" 
		allowMultipleSelection="true"
		itemRenderer="fr.semantic_learning.semquiz.utils.CheckBoxControlList"/>
	
	<mx:Text x="454" y="372" text="Competence:"/>
	
	<mx:TextInput x="667" y="274" width="127" text="Search Competence" id="competenceTextInput"/>
	<utils:DragSelectList x="667" y="298"
		width="255" height="217"
		id="competenceList"
		labelFunction="getLabelCompetence"
		change="setCompetence()"
		buttonMode="true"
		dropEnabled="true" 
		dragEnabled="true" 
		dragMoveEnabled="true" 
		allowMultipleSelection="true"
		itemRenderer="fr.semantic_learning.semquiz.utils.CheckBoxControlList"/>
	<mx:Button x="802" y="274" label="Get Competence" id="competenceBtn" click="getCompetence()"/>
	
	<utils:DragSelectList x="454" y="398"
		width="180"
		height="117"
		id="competenceSelectedList"
		labelFunction="getLabelCompetence"
		buttonMode="true"
		dropEnabled="true" 
		dragEnabled="true" 
		dragMoveEnabled="true" 
		allowMultipleSelection="true"
		itemRenderer="fr.semantic_learning.semquiz.utils.CheckBoxControlList"/>
	<mx:Button x="351" y="475" id="addNewUnitBtn" label="Add Unit" click="addNewUnit();"/>
	<mx:Button x="453" y="25" label="Previous" width="195" click="previous()"/>
	<mx:Button x="656" y="25" label="Next" width="205" click="next()"/>
	<mx:HRule x="29" y="82" width="398"/>
	<mx:HRule x="455" y="241" width="467" height="3"/>
	<mx:HRule x="27" y="329" width="399"/>
	
	
</mx:Canvas>
